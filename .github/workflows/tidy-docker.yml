name: Tidy Docker

# Every 2 days at 00:00 UTC
# Remove all docker images from github registry that match;
#
# 1. <sha> where updated_at is older than 3 days
# 2. <pr-NUMBER> where updated_at is older than 7 days
# 3. anything that isn't `latest`, `edge` or a release tag
# 4. that includes anything without a tag (we'll see if this is a problem)

on:
  schedule:
    - cron: "0 0 * * *" # Every day at 00:00 UTC
  workflow_dispatch:
  pull_request:
    branches:
      - master

env:
  # IMAGES: |-
  #   merod
  GH_TOKEN: ${{ github.token }}

concurrency:
  group: tidy-docker
  cancel-in-progress: true

permissions:
  packages: write

jobs:
  clean:
    name: Clean Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          dry-run: true
          package: merod
          exclude-tags: ^edge|latest|(\d+\.\d+\.\d+(-pre\.\d+)?)|pr-\d+$
          older-than: 2 days
          delete-orphaned-images: true
          delete-partial-images: true

      - name: Get open PRs
        id: prepare
        run: |
          prs=$(gh pr list --state open --json number -q '.[].number' | xargs | sed -E 's/(^| )/\1pr-/g;s/ /,/g')
          echo "active_prs=$prs" >> $GITHUB_ENV

      - uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          dry-run: true
          package: merod
          delete-tags: ^pr-\d+$
          exclude-tags: ${{ steps.prepare.outputs.active_prs }}
          older-than: 4 days
    # steps:
    #   - name: Checkout Code
    #     uses: actions/checkout@v4

    #   - name: Clean Docker Images
    #     run: |
    #       readarray -t binaries <<< "$BINARIES"

    #       for binary in "${binaries[@]}"; do
    #         echo "Cleaning images for $binary"
    #         gh api --paginate "/orgs/${{ github.repository_owner }}/packages/container/${binary}/versions" \
    #           --jq "\
    #             now as \$now | \
    #             (\$now - 259200) as \$_3_days_ago | \
    #             (\$now - 604800) as \$_7_days_ago | \
    #             .[] | { \
    #               id, \
    #               updated_at: .updated_at | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime, \
    #               tags: .metadata.container.tags \
    #             } | . + { \
    #               is_pr: ([.tags[] | contains(\"pr-\")] | any), \
    #               is_latest: ([.tags[] | test(\"latest|edge\")] | any), \
    #               is_release: ([.tags[] | test(\"[0-9].[0-9].[0-9](-pre.[0-9])?\$\")] | any), \
    #             } | \
    #             select( \
    #               (.is_pr and .updated_at > \$_7_days_ago or .is_latest or .is_release | not) \
    #                 and .updated_at < \$_3_days_ago \
    #             ) | \
    #             \"\(.id) \(.updated_at) \(.tags | join(\"\"))\" \
    #           " > images.txt

    #         echo "[$binary]"
    #         while read -r id updated_at tags; do
    #           updated_at=$(date -d "@$updated_at" -u +"%Y-%m-%dT%H:%M:%SZ")
    #           echo "  - id=$id, tags=$tags, updated_at=$updated_at"

    #           gh api -X DELETE "/orgs/${{ github.repository_owner }}/packages/container/${binary}/versions/$id"
    #         done < images.txt
    #       done
