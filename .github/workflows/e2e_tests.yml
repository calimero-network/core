name: End-to-end tests

on:
  push:
    branches:
      - '**'
    paths:
      - Cargo.toml
      - Cargo.lock
      - 'contracts/**'
      - 'crates/**'
      - 'e2e-tests/**'
      - '.github/workflows/e2e_tests.yml'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    outputs:
      SWARM_PORT: ${{ steps.prepare_e2e_tests_config.outputs.SWARM_PORT }}
      SERVER_PORT: ${{ steps.prepare_e2e_tests_config.outputs.SERVER_PORT }}
      ICP_PORT: ${{ steps.prepare_e2e_tests_config.outputs.ICP_PORT }}
      SWARM_HOST: ${{ steps.get_host.outputs.SWARM_HOST }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - name: Build Apps & Binaries
        run: |
          ./apps/kv-store/build.sh
          cargo build -p meroctl -p merod -p e2e-tests

      - name: Generate Ports
        id: prepare_e2e_tests_config
        run: |
          SWARM_PORT=$((RANDOM % 37001 + 3000))
          SERVER_PORT=$((RANDOM % 37001 + 3000))
          ICP_PORT=$((RANDOM % 37001 + 3000))
          echo "SWARM_PORT=$SWARM_PORT" >> $GITHUB_OUTPUT
          echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_OUTPUT
          echo "ICP_PORT=$ICP_PORT" >> $GITHUB_OUTPUT

      - name: Get Host IP
        id: get_host
        run: echo "SWARM_HOST=$(hostname -I | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: target/debug/
          retention-days: 2

  test:
    needs: build
    name: "Test ${{ matrix.protocol }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        protocol: [near, icp, stellar]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: target/debug/

      - name: Setup Protocol-Specific Dependencies
        run: |
          if [[ "${{ matrix.protocol }}" == "icp" ]]; then
            echo "Setting up ICP"
            cargo install candid-extractor
            echo "Installing dfx..."
            curl -fsSL https://sdk.dfinity.org/install.sh | bash
          fi

      - name: Build Contracts (if needed)
        run: |
          if [[ "${{ matrix.protocol }}" == "near" ]]; then
            ./contracts/near/context-config/build.sh
            ./contracts/near/context-proxy/build.sh
          elif [[ "${{ matrix.protocol }}" == "stellar" ]]; then
            ./contracts/stellar/context-config/build.sh
            ./contracts/stellar/context-proxy/build.sh
          fi

      - name: Deploy Local Devnet (if needed)
        run: |
          if [[ "${{ matrix.protocol }}" == "icp" ]]; then
            cd ./contracts/icp/context-config
            ICP_PORT=${{ needs.build.outputs.ICP_PORT }} ./deploy_devnet.sh
            cd ../../..
          elif [[ "${{ matrix.protocol }}" == "stellar" ]]; then
            ./contracts/stellar/context-config/deploy_devnet_env.sh > env_output.txt
            CONTRACT_ID=$(grep "Contract ID:" env_output.txt | awk '{print $3}')
            ACCOUNT_ADDRESS=$(grep "Account address:" env_output.txt | awk '{print $3}')
            SECRET_KEY=$(grep "Secret key:" env_output.txt | awk '{print $3}')
            jq --arg contractId "$CONTRACT_ID" --arg publicKey "$ACCOUNT_ADDRESS" --arg secretKey "$SECRET_KEY" \
              '.protocolSandboxes[2].config.contextConfigContractId = $contractId |
               .protocolSandboxes[2].config.publicKey = $publicKey |
               .protocolSandboxes[2].config.secretKey = $secretKey' \
              e2e-tests/config/config.json > tmp.json && mv tmp.json e2e-tests/config/config.json
          fi

      - name: Run e2e Tests
        env:
          NO_COLOR: '1'
          SWARM_HOST: ${{ needs.build.outputs.SWARM_HOST }}
          ICP_PORT: ${{ needs.build.outputs.ICP_PORT }}
        run: |
          echo "Running e2e tests for ${{ matrix.protocol }}"
          ./target/debug/e2e-tests \
            --input-dir ./e2e-tests/config \
            --output-dir ./e2e-tests/corpus \
            --merod-binary ./target/debug/merod \
            --meroctl-binary ./target/debug/meroctl \
            --protocols ${{ matrix.protocol }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: e2e-tests-${{ matrix.protocol }}
          path: e2e-tests/corpus/
          retention-days: 2
