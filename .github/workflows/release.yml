name: Release

on:
  push:
    branches:
      - master
    paths:
      - Cargo.toml
      - Cargo.lock
      - "crates/**"
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
    paths:
      - Cargo.toml
      - Cargo.lock
      - "crates/**"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BINARIES: |-
    merod
    meroctl

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_info.outputs.version }}
      binary_release: ${{ steps.version_info.outputs.binary_release }}
      docker_release: ${{ steps.version_info.outputs.docker_release }}
      prerelease: ${{ steps.version_info.outputs.prerelease }}
      overwrite_release: ${{ steps.version_info.outputs.overwrite_release }}
      target_commit: ${{ steps.version_info.outputs.target_commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version info
        id: version_info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "target_commit=${{ github.sha }}" >> $GITHUB_OUTPUT

          version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "calimero-version") | .version')

          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            if [[ "$version" =~ "-[a-z]+(\.[0-9]+)?$" ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
              echo "overwrite_release=true" >> $GITHUB_OUTPUT
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
              echo "overwrite_release=false" >> $GITHUB_OUTPUT
            fi

            if gh release view "$version" --repo ${{ github.repository }} >/dev/null 2>&1; then
              echo "binary_release=false" >> $GITHUB_OUTPUT
              echo "docker_release=false" >> $GITHUB_OUTPUT
            else
              echo "binary_release=true" >> $GITHUB_OUTPUT
              echo "docker_release=true" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "binary_release=false" >> $GITHUB_OUTPUT
            echo "docker_release=true" >> $GITHUB_OUTPUT
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

  build-binaries:
    name: Build Binaries
    needs: prepare
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
      fail-fast: false
    runs-on: ${{ matrix.os }}

    env:
      CALIMERO_WEBUI_FETCH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release

      - name: Update Bash
        if: ${{ matrix.os == 'macos-13' || matrix.os == 'macos-latest' }}
        run: brew install bash

      - name: Build binaries
        run: |
          readarray -t binaries <<< "$BINARIES"

          binaries=$(printf -- '-p %s ' "${binaries[@]}")

          cargo build $binaries --release --target ${{ matrix.target }}

      - name: Compress artifacts using gzip
        run: |
          mkdir -p artifacts

          readarray -t binaries <<< "$BINARIES"

          for binary in "${binaries[@]}"; do
            tar -czf artifacts/"$binary"_${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release "$binary"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.target }}
          path: artifacts/*
          retention-days: 2

  release-binaries:
    name: Release Binaries
    if: needs.prepare.outputs.binary_release == 'true'
    runs-on: ubuntu-latest
    needs: [prepare, build-binaries]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/*
          file_glob: true
          tag: ${{ needs.prepare.outputs.version }}
          release_name: ${{ needs.prepare.outputs.version }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          overwrite: ${{ needs.prepare.outputs.overwrite_release }}
          target_commit: ${{ needs.prepare.outputs.target_commit }}

  build-docker:
    name: Build Docker Image
    needs: [prepare, build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries/
          merge-multiple: true

      - name: Extract Linux binaries
        run: |
          mkdir -p ./bin/amd64 ./bin/arm64

          readarray -t binaries <<< "$BINARIES"

          for binary in ${binaries[@]}; do
            echo "Extracting ${binary} binaries"

            tar -xzf binaries/${binary}_x86_64-unknown-linux-gnu.tar.gz -C ./bin/amd64 --no-same-owner
            tar -xzf binaries/${binary}_aarch64-unknown-linux-gnu.tar.gz -C ./bin/arm64 --no-same-owner
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker Cache parameters
        id: prepare
        run: |
          MASTER_SCOPE="${{ github.repository_owner }}-docker-master"
          DEV_SCOPE="${{ github.repository_owner }}-docker-dev"

          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "cache_from=type=gha,scope=${MASTER_SCOPE}" >> $GITHUB_OUTPUT
            echo "cache_to=type=gha,scope=${MASTER_SCOPE},mode=max" >> $GITHUB_OUTPUT
          else
            echo "cache_from=type=gha,scope=${MASTER_SCOPE} type=gha,scope=${DEV_SCOPE}" >> $GITHUB_OUTPUT
            echo "cache_to=type=gha,scope=${DEV_SCOPE},mode=max" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "docker_source=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          else
            echo "docker_source=https://github.com/${{ github.repository }}/tree/${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        env:
          LABELS: |
            org.opencontainers.image.description=Calimero Node
            org.opencontainers.image.source=${{ steps.prepare.outputs.docker_source }}
            org.opencontainers.image.licenses=MIT OR Apache-2.0
            org.opencontainers.image.authors=Calimero Limited <info@calimero.network>
            org.opencontainers.image.url=https://calimero.network
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: ghcr.io/${{ github.repository_owner }}/merod
          tags: |
            type=edge
            type=ref,prefix=pr-,event=pr
            type=sha,prefix=,format=short
            type=raw,value=${{ needs.prepare.outputs.version }},enable=${{ github.ref == 'refs/heads/master' && needs.prepare.outputs.docker_release == 'true' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' && needs.prepare.outputs.docker_release == 'true' }}
          labels: ${{ env.LABELS }}
          annotations: ${{ env.LABELS }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/deps/prebuilt.Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          annotations: ${{ steps.metadata.outputs.annotations }}
          cache-from: ${{ steps.prepare.outputs.cache_from }}
          cache-to: ${{ steps.prepare.outputs.cache_to }}
          provenance: false
          sbom: false

  brew-update:
    name: Update Homebrew Tap
    if: needs.prepare.outputs.binary_release == 'true'
    runs-on: ubuntu-latest
    needs: [prepare, release-binaries]
    permissions:
      id-token: write
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            homebrew-tap

      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/homebrew-tap
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh auth setup-git
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Update Formula
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          target_branch="chore/bump-formulas-version"
          git fetch origin "${target_branch}" || true
          git checkout "${target_branch}" || git checkout -b "${target_branch}"

          readarray -t binaries <<< "$BINARIES"

          for binary in "${binaries[@]}"; do
            echo "Updating formula for ${binary}, version: ${version}"
            ./generate-formula.sh "${binary}" "${{ needs.prepare.outputs.version }}"
          done

          git status

          if git diff-index --quiet HEAD --; then
            echo "There are no changes to commit"
            exit 1
          fi

          git add Formula/
          git commit -m "chore: bump formulas version"
          git push origin "${target_branch}"

          gh pr create -f || true
