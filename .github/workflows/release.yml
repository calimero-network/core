name: Release

on:
  push:
    branches:
      - master
    paths:
      - Cargo.toml
      - Cargo.lock
      - "crates/**"
  pull_request:
    paths:
      - Cargo.toml
      - Cargo.lock
      - "crates/**"

permissions:
  contents: read

env:
  BINARIES: |-
    merod
    meroctl
    calimero-abi
  AUTH_BINARIES: |-
    mero-auth

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_info.outputs.version }}
      binary_release: ${{ steps.version_info.outputs.binary_release }}
      docker_release: ${{ steps.version_info.outputs.docker_release }}
      docker_push: ${{ github.event.pull_request && !github.event.pull_request.head.repo.fork || !github.event.pull_request }}
      prerelease: ${{ steps.version_info.outputs.prerelease }}
      target_commit: ${{ steps.version_info.outputs.target_commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version info
        id: version_info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "target_commit=${{ github.sha }}" >> $GITHUB_OUTPUT

          version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "calimero-version") | .version')

          prerelease=false
          binary_release=false
          docker_release=false

          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            if [[ "$version" =~ -[a-z]+(\.[0-9]+)?$ ]]; then
              prerelease=true
            fi

            if ! gh release view "$version" --repo ${{ github.repository }} >/dev/null 2>&1; then
              binary_release=true
              docker_release=true
            fi
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            docker_release=true
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
          echo "binary_release=$binary_release" >> $GITHUB_OUTPUT
          echo "docker_release=$docker_release" >> $GITHUB_OUTPUT

  build-binaries:
    name: Build Binaries
    needs: prepare
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
      fail-fast: false
    runs-on: ${{ matrix.os }}

    env:
      CALIMERO_WEBUI_FETCH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CALIMERO_AUTH_FRONTEND_FETCH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release

      - name: Update Bash
        if: ${{ matrix.os == 'macos-13' || matrix.os == 'macos-latest' }}
        run: brew install bash

      - name: Build binaries
        run: |
          readarray -t binaries <<< "$BINARIES"
          readarray -t auth_binaries <<< "$AUTH_BINARIES"

          binaries+=("${auth_binaries[@]}")

          binaries=$(printf -- '-p %s ' "${binaries[@]}")

          cargo build $binaries --release --target ${{ matrix.target }}

      - name: Compress artifacts using gzip
        run: |
          mkdir -p artifacts

          readarray -t binaries <<< "$BINARIES"
          readarray -t auth_binaries <<< "$AUTH_BINARIES"

          binaries+=("${auth_binaries[@]}")

          for binary in "${binaries[@]}"; do
            tar -czf artifacts/"$binary"_${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release "$binary"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.target }}
          path: artifacts/*
          retention-days: 2

  release-binaries:
    name: Release Binaries
    if: needs.prepare.outputs.binary_release == 'true'
    runs-on: ubuntu-latest
    needs: [prepare, build-binaries]
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-${{ needs.prepare.outputs.version }}
      cancel-in-progress: true
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/*
          file_glob: true
          tag: ${{ needs.prepare.outputs.version }}
          release_name: ${{ needs.prepare.outputs.version }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          target_commit: ${{ needs.prepare.outputs.target_commit }}

  release-merod-container:
    name: Release Merod container
    needs: [prepare, build-binaries]
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-merod-${{ needs.prepare.outputs.version }}
      cancel-in-progress: true
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Release
        uses: ./.github/actions/container-release
        with:
          version: ${{ needs.prepare.outputs.version }}
          release: ${{ needs.prepare.outputs.docker_release }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          push: ${{ needs.prepare.outputs.docker_push }}
          binaries: ${{ env.BINARIES }}
          dockerfile: .github/workflows/deps/prebuilt.Dockerfile
          container_name: merod
          github-token: ${{ secrets.GITHUB_TOKEN }}

  release-mero-auth-container:
    name: Release Mero Auth container
    needs: [prepare, build-binaries]
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-mero-auth-${{ needs.prepare.outputs.version }}
      cancel-in-progress: true
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Release
        uses: ./.github/actions/container-release
        with:
          version: ${{ needs.prepare.outputs.version }}
          release: ${{ needs.prepare.outputs.docker_release }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          push: ${{ needs.prepare.outputs.docker_push }}
          binaries: ${{ env.AUTH_BINARIES }}
          dockerfile: .github/workflows/deps/prebuilt.auth.Dockerfile
          container_name: mero-auth
          github-token: ${{ secrets.GITHUB_TOKEN }}

  brew-update:
    name: Update Homebrew Tap
    if: needs.prepare.outputs.binary_release == 'true'
    runs-on: ubuntu-latest
    needs: [prepare, release-binaries]
    permissions:
      id-token: write
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            homebrew-tap

      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/homebrew-tap
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh auth setup-git
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Update Formula
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          target_branch="chore/bump-formulas-version"
          git fetch origin "${target_branch}" || true
          git checkout "${target_branch}" || git checkout -b "${target_branch}"

          readarray -t binaries <<< "$BINARIES"

          for binary in "${binaries[@]}"; do
            echo "Updating formula for ${binary}, version: ${version}"
            ./generate-formula.sh "${binary}" "${{ needs.prepare.outputs.version }}"
          done

          git status

          if git diff-index --quiet HEAD --; then
            echo "There are no changes to commit"
            exit 1
          fi

          git add Formula/
          git commit -m "chore: bump formulas version"
          git push origin "${target_branch}"

          gh pr create -f || true
