name: Build Python Wheels

on:
  push:
    branches: [ master ]
    paths:
      - 'crates/client/**'
      - 'crates/auth/**'
      - '.github/workflows/build-wheels.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'crates/client/**'
      - 'crates/auth/**'
      - '.github/workflows/build-wheels.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install maturin
      run: |
        python -m pip install --upgrade pip
        pip install maturin

    - name: Build wheel
      run: |
        cd crates/client/python
        PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1 maturin build --release --out dist --interpreter python

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: crates/client/python/dist/*.whl
        retention-days: 1

  check-version:
    name: Check if version was bumped
    runs-on: ubuntu-latest
    needs: [build-wheels]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
      actions: write
    outputs:
      version-bumped: ${{ steps.check.outputs.bumped }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check version changes
      id: check
      run: |
        cd crates/client/python
        
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Get previous version from git history
        PREVIOUS_VERSION=$(git show HEAD~1:crates/client/python/pyproject.toml | grep '^version = ' | cut -d'"' -f2 || echo "0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Check if version was bumped
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version bumped from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "bumped=true" >> $GITHUB_OUTPUT
        else
          echo "No version change detected"
          echo "bumped=false" >> $GITHUB_OUTPUT
        fi

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, check-version]
    if: github.ref == 'refs/heads/master' && needs.check-version.outputs.version-bumped == 'true'
    permissions:
      contents: read
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        download-archive-multiple: true

    - name: Combine artifacts
      run: |
        mkdir -p dist/
        # Find and move all wheel files to dist/
        find . -name "*.whl" -exec mv {} dist/ \;
        # List contents
        echo "Wheels found:"
        ls -la dist/
        echo "Total wheel count: $(ls dist/*.whl 2>/dev/null | wc -l)"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
