type ContextRequest = record { context_id : blob; kind : ContextRequestKind };
type ContextRequestKind = variant {
  Add : record { application : ICApplication; author_id : blob };
  Grant : record { capabilities : vec record { blob; ICCapability } };
  UpdateApplication : record { application : ICApplication };
  RemoveMembers : record { members : vec blob };
  Revoke : record { capabilities : vec record { blob; ICCapability } };
  AddMembers : record { members : vec blob };
  UpdateProxyContract;
};
type ICApplication = record {
  id : blob;
  source : text;
  metadata : blob;
  "blob" : blob;
  size : nat64;
};
type ICCapability = variant { Proxy; ManageMembers; ManageApplication };
type ICPSigned = record { signature : blob; payload : Request };
type Request = record {
  timestamp_ms : nat64;
  kind : RequestKind;
  signer_id : blob;
};
type RequestKind = variant { Context : ContextRequest };
type Result = variant { Ok; Err : text };
service : () -> {
  application : (blob) -> (ICApplication) query;
  application_revision : (blob) -> (nat64) query;
  has_member : (blob, blob) -> (bool) query;
  members : (blob, nat64, nat64) -> (vec blob) query;
  members_revision : (blob) -> (nat64) query;
  mutate : (ICPSigned) -> (Result);
  privileges : (blob, vec blob) -> (
      vec record { blob; vec ICCapability },
    ) query;
  proxy_contract : (blob) -> (text) query;
}
