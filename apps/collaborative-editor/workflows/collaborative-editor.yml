description: A workflow demonstrating collaborative text editing using RGA CRDT
name: Collaborative Editor Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:094d5f8
  prefix: calimero-node

steps:
  # ============================================
  # Setup Phase: Install app and create context
  # ============================================

  # Step 1: Install the collaborative editor application on Node 1
  - name: Install Collaborative Editor on Node 1
    type: install_application
    node: calimero-node-1
    path: res/collaborative_editor.wasm
    dev: true
    outputs:
      app_id: applicationId

  # Step 2: Create a context using the installed application
  - name: Create Context on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    params: '{"title": "Shared Document"}'
    outputs:
      context_id: contextId
      member_public_key: memberPublicKey

  - name: Assert context created
    type: assert
    statements:
      - "is_set({{context_id}})"
      - "is_set({{member_public_key}})"

  # Step 3: Generate identity on second node
  - name: Create Identity on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      public_key: publicKey

  - name: Wait for Identity Creation
    type: wait
    seconds: 5

  # Step 4: Invite second node to join the context
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_id}}"
    grantee_id: "{{public_key}}"
    granter_id: "{{member_public_key}}"
    capability: member
    outputs:
      invitation: invitation

  # Step 5: Join context from second node
  - name: Join Context from Node 2
    type: join_context
    node: calimero-node-2
    context_id: "{{context_id}}"
    invitee_id: "{{public_key}}"
    invitation: "{{invitation}}"

  # ============================================
  # Testing Phase: Collaborative Editing
  # ============================================

  # Step 6: Verify document starts empty
  - name: Get Initial Text (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      initial_text: result

  - name: Assert document is initially empty
    type: json_assert
    statements:
      - 'json_equal({{initial_text}}, {"output": ""})'

  # Step 7: Insert "Hello" at position 0 from Node 1
  - name: Insert Hello from Node 1
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: insert_text
    args:
      position: 0
      text: "Hello"
    outputs:
      insert_hello_result: result

  - name: Assert Hello inserted successfully
    type: json_assert
    statements:
      - 'json_equal({{insert_hello_result}}, {"output": null})'

  - name: Wait for edit to propagate
    type: wait
    seconds: 2

  # Step 8: Verify text on both nodes
  - name: Get Text After Hello (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_node1_hello: result

  - name: Assert Node 1 sees Hello
    type: json_assert
    statements:
      - 'json_equal({{text_node1_hello}}, {"output": "Hello"})'

  - name: Get Text After Hello (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_node2_hello: result

  - name: Assert Node 2 sees Hello (synced)
    type: json_assert
    statements:
      - 'json_equal({{text_node2_hello}}, {"output": "Hello"})'

  # Step 9: Append " World" from Node 2
  - name: Append World from Node 2
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: append_text
    args:
      text: " World"
    outputs:
      append_world_result: result

  - name: Wait for edit to propagate
    type: wait
    seconds: 2

  # Step 10: Verify both nodes see "Hello World"
  - name: Get Text After World (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_node1_world: result

  - name: Assert Node 1 sees Hello World
    type: json_assert
    statements:
      - 'json_equal({{text_node1_world}}, {"output": "Hello World"})'

  - name: Get Text After World (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_node2_world: result

  - name: Assert Node 2 sees Hello World
    type: json_assert
    statements:
      - 'json_equal({{text_node2_world}}, {"output": "Hello World"})'

  # Step 11: Insert "!" at end from Node 1
  - name: Insert Exclamation from Node 1
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: insert_text
    args:
      position: 11
      text: "!"
    outputs:
      insert_exclamation_result: result

  - name: Wait for edit to propagate
    type: wait
    seconds: 2

  # Step 12: Verify both nodes see "Hello World!"
  - name: Get Text After Exclamation (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_with_exclamation_node1: result

  - name: Assert Node 1 sees Hello World!
    type: json_assert
    statements:
      - 'json_equal({{text_with_exclamation_node1}}, {"output": "Hello World!"})'

  - name: Get Text After Exclamation (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_with_exclamation_node2: result

  - name: Assert Node 2 sees Hello World!
    type: json_assert
    statements:
      - 'json_equal({{text_with_exclamation_node2}}, {"output": "Hello World!"})'

  # Step 13: Delete "World" (positions 6-11) from Node 2
  - name: Delete World from Node 2
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: delete_text
    args:
      start: 6
      end: 11
    outputs:
      delete_world_result: result

  - name: Wait for deletion to propagate
    type: wait
    seconds: 2

  # Step 14: Verify both nodes see "Hello !"
  - name: Get Text After Deletion (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_after_delete_node1: result

  - name: Assert Node 1 sees Hello !
    type: json_assert
    statements:
      - 'json_equal({{text_after_delete_node1}}, {"output": "Hello !"})'

  - name: Get Text After Deletion (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_after_delete_node2: result

  - name: Assert Node 2 sees Hello !
    type: json_assert
    statements:
      - 'json_equal({{text_after_delete_node2}}, {"output": "Hello !"})'

  # Step 15: Insert "CRDT" at position 6 from Node 1
  - name: Insert CRDT from Node 1
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: insert_text
    args:
      position: 6
      text: "CRDT"
    outputs:
      insert_crdt_result: result

  - name: Wait for edit to propagate
    type: wait
    seconds: 2

  # Step 16: Verify both nodes see "Hello CRDT!"
  - name: Get Text After CRDT Insert (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_with_crdt_node1: result

  - name: Assert Node 1 sees Hello CRDT!
    type: json_assert
    statements:
      - 'json_equal({{text_with_crdt_node1}}, {"output": "Hello CRDT!"})'

  - name: Get Text After CRDT Insert (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_with_crdt_node2: result

  - name: Assert Node 2 sees Hello CRDT!
    type: json_assert
    statements:
      - 'json_equal({{text_with_crdt_node2}}, {"output": "Hello CRDT!"})'

  # Step 17: Test replace_text operation
  - name: Replace CRDT with Calimero from Node 2
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: replace_text
    args:
      start: 6
      end: 10
      text: "Calimero"
    outputs:
      replace_result: result

  - name: Wait for replacement to propagate
    type: wait
    seconds: 2

  # Step 18: Verify both nodes see "Hello Calimero!"
  - name: Get Text After Replace (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_after_replace_node1: result

  - name: Assert Node 1 sees Hello Calimero!
    type: json_assert
    statements:
      - 'json_equal({{text_after_replace_node1}}, {"output": "Hello Calimero!"})'

  - name: Get Text After Replace (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_after_replace_node2: result

  - name: Assert Node 2 sees Hello Calimero!
    type: json_assert
    statements:
      - 'json_equal({{text_after_replace_node2}}, {"output": "Hello Calimero!"})'

  # Step 19: Test document length
  - name: Get Document Length (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_length
    outputs:
      doc_length: result

  - name: Assert length is correct (15 characters)
    type: json_assert
    statements:
      - 'json_equal({{doc_length}}, {"output": 15})'

  # Step 20: Test is_empty
  - name: Check if Document is Empty (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: is_empty
    outputs:
      is_empty_result: result

  - name: Assert document is not empty
    type: json_assert
    statements:
      - 'json_equal({{is_empty_result}}, {"output": false})'

  # Step 21: Test title operations
  - name: Get Initial Title (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_title
    outputs:
      initial_title: result

  - name: Assert title is Shared Document
    type: json_assert
    statements:
      - 'json_equal({{initial_title}}, {"output": "Shared Document"})'

  # Step 22: Change document title from Node 2
  - name: Set New Title from Node 2
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: set_title
    args:
      new_title: Collaborative Editor Demo
    outputs:
      set_title_result: result

  - name: Wait for title change to propagate
    type: wait
    seconds: 2

  # Step 23: Verify title changed on both nodes
  - name: Get New Title (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_title
    outputs:
      new_title_node1: result

  - name: Assert title changed on Node 1
    type: json_assert
    statements:
      - 'json_equal({{new_title_node1}}, {"output": "Collaborative Editor Demo"})'

  - name: Get New Title (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_title
    outputs:
      new_title_node2: result

  - name: Assert title changed on Node 2
    type: json_assert
    statements:
      - 'json_equal({{new_title_node2}}, {"output": "Collaborative Editor Demo"})'

  # Step 24: Get document statistics
  - name: Get Document Stats (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_stats
    outputs:
      stats: result

  - name: Assert stats contain expected values
    type: json_assert
    statements:
      - 'json_path_contains({{stats}}, "$.output", "Title: Collaborative Editor Demo")'
      - 'json_path_contains({{stats}}, "$.output", "Length: 15 characters")'

  # Step 25: Test clear operation
  - name: Clear Document from Node 1
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: clear
    outputs:
      clear_result: result

  - name: Wait for clear to propagate
    type: wait
    seconds: 2

  # Step 26: Verify document is empty on both nodes
  - name: Get Text After Clear (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_after_clear_node1: result

  - name: Assert Node 1 document is empty
    type: json_assert
    statements:
      - 'json_equal({{text_after_clear_node1}}, {"output": ""})'

  - name: Get Text After Clear (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_after_clear_node2: result

  - name: Assert Node 2 document is empty
    type: json_assert
    statements:
      - 'json_equal({{text_after_clear_node2}}, {"output": ""})'

  # Step 27: Verify is_empty returns true
  - name: Check if Document is Empty After Clear (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: is_empty
    outputs:
      is_empty_after_clear: result

  - name: Assert document is now empty
    type: json_assert
    statements:
      - 'json_equal({{is_empty_after_clear}}, {"output": true})'

  # Step 28: Test concurrent edits from both nodes
  - name: Insert ABC from Node 1
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: insert_text
    args:
      position: 0
      text: "ABC"
    outputs:
      insert_abc_result: result

  - name: Insert XYZ from Node 2
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: insert_text
    args:
      position: 0
      text: "XYZ"
    outputs:
      insert_xyz_result: result

  - name: Wait for concurrent edits to propagate
    type: wait
    seconds: 3

  # Step 29: Verify both nodes converge to same text (CRDT property)
  - name: Get Text After Concurrent Edits (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_text
    outputs:
      text_concurrent_node1: result

  - name: Get Text After Concurrent Edits (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_text
    outputs:
      text_concurrent_node2: result

  - name: Assert both nodes have same text (convergence)
    type: json_assert
    statements:
      - 'json_equal({{text_concurrent_node1}}, {{text_concurrent_node2}})'

  - name: Get Length After Concurrent Edits (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get_length
    outputs:
      length_concurrent: result

  - name: Assert total length is 6 (ABC + XYZ)
    type: json_assert
    statements:
      - 'json_equal({{length_concurrent}}, {"output": 6})'

  # Step 30: Test error handling - invalid position
  - name: Try to Insert at Invalid Position (Should Fail)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: insert_text
    args:
      position: 100
      text: "Invalid"
    outputs:
      invalid_insert_error: result
    expect_error: true

  # Step 31: Test error handling - invalid range
  - name: Try to Delete Invalid Range (Should Fail)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: delete_text
    args:
      start: 10
      end: 5
    outputs:
      invalid_delete_error: result
    expect_error: true

  # Step 32: Test error handling - empty title
  - name: Try to Set Empty Title (Should Fail)
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: set_title
    args:
      new_title: ""
    outputs:
      empty_title_error: result
    expect_error: true

# Configuration
stop_all_nodes: false
restart: false
wait_timeout: 60

