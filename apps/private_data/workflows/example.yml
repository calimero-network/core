description: A sample workflow that demonstrates the bootstrap functionality with dynamic value capture
name: Sample Calimero Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:edge
  prefix: calimero-node

steps:
  # Step 1: Install the application on the first node
  # This captures the application ID for use in subsequent steps
  - name: Install Application on Node 1
    type: install_application
    node: calimero-node-1
    path: res/private_data.wasm
    dev: true
    outputs:
      app_id: applicationId          # Export 'applicationId' field as 'app_id'

  # Step 2: Create a context using the installed application
  # Uses the captured application ID from step 1
  - name: Create Context on Node 1
    type: create_context
    node: calimero-node-1
    application_id: '{{app_id}}'
    outputs:
      context_id: contextId          # Export 'contextId' field as 'context_id'
      member_public_key: memberPublicKey  # Export 'memberPublicKey' as 'member_public_key'

  - name: Assert context created
    type: assert
    statements:
      - "is_set({{context_id}})"
      - "is_set({{member_public_key}})"

  # Step 3: Generate an identity on the second node
  # This captures the public key for use in invitation and joining
  - name: Create Identity on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      public_key: publicKey         # Export 'publicKey' as 'public_key'

  # Step 4: Wait for identity creation to complete
  - name: Wait for Identity Creation
    type: wait
    seconds: 5

  # Step 5: Invite the second node to join the context
  # Uses captured values: context ID, member public key, and identity public key
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: calimero-node-1
    context_id: '{{context_id}}'
    grantee_id: '{{public_key}}'
    granter_id: '{{member_public_key}}'
    capability: member
    outputs:
      invitation: invitation         # Export 'invitation' as 'invitation'

  # Step 6: Join the context from the second node
  # Uses captured values: context ID, invitee identity, and invitation data
  - name: Join Context from Node 2
    type: join_context
    node: calimero-node-2
    context_id: '{{context_id}}'
    invitee_id: '{{public_key}}'
    invitation: '{{invitation}}'

  # Step 7: Execute a contract call to set a secret for a game
  # Uses the member public key from the context as the executor
  - name: Execute Contract Call - Add Secret
    type: call
    node: calimero-node-1
    context_id: '{{context_id}}'
    executor_public_key: '{{member_public_key}}'
    method: add_secret
    args:
      game_id: game-1
      secret: s3cr3t
    outputs:
      add_secret_result: result

  - name: Assert add_secret executed
    type: assert
    statements:
      - "is_set({{add_secret_result}})"

  # Step 8: Wait for the operation to complete and propagate
  - name: Wait for Add Secret Operation
    type: wait
    seconds: 3

  - name: Execute View Call - My Secrets (node 1)
    type: call
    node: calimero-node-1
    context_id: '{{context_id}}'
    executor_public_key: '{{member_public_key}}'
    method: my_secrets
    outputs:
      my_secrets_node1_result: result

  - name: Assert node-1 has private secret for game-1
    type: json_assert
    statements:
      - 'json_subset({{my_secrets_node1_result}}, {"output": {"game-1": "s3cr3t"}})'

  # Step 9: Execute a view call to retrieve the public games map
  - name: Execute View Call - Games
    type: call
    node: calimero-node-2
    context_id: '{{context_id}}'
    executor_public_key: '{{public_key}}'
    method: games
    outputs:
      games_result: result

  - name: Assert games contains expected hash for game-1
    type: json_assert
    statements:
      - 'json_subset({{games_result}}, {"output": {"game-1": "4e738ca5563c06cfd0018299933d58db1dd8bf97f6973dc99bf6cdc64b5550bd"}})'

  # Step 10: Execute a view call to retrieve caller-local secrets
  - name: Execute View Call - My Secrets (node-2)
    type: call
    node: calimero-node-2
    context_id: '{{context_id}}'
    executor_public_key: '{{public_key}}'
    method: my_secrets
    outputs:
      my_secrets_result: result

  - name: Assert node-2 has no private secrets
    type: json_assert
    statements:
      - 'json_equal({{my_secrets_result}}, {"output": {}})'

  # Step 11: Positive guess
  - name: Execute Contract Call - Guess OK
    type: call
    node: calimero-node-1
    context_id: '{{context_id}}'
    executor_public_key: '{{member_public_key}}'
    method: add_guess
    args:
      game_id: game-1
      guess: s3cr3t
    outputs:
      guess_ok_result: result

  - name: Assert guess OK returned true
    type: json_assert
    statements:
      - 'json_equal({{guess_ok_result}}, {"output": true})'

  # Step 12: Negative guess
  - name: Execute Contract Call - Guess Bad
    type: call
    node: calimero-node-2
    context_id: '{{context_id}}'
    executor_public_key: '{{public_key}}'
    method: add_guess
    args:
      game_id: game-1
      guess: wrong
    outputs:
      guess_bad_result: result

  - name: Assert guess Bad returned false
    type: json_assert
    statements:
      - 'json_equal({{guess_bad_result}}, {"output": false})'

# Configuration options
stop_all_nodes: false   # Stop all nodes at the end of workflow
restart: false          # Don't restart nodes at the beginning of workflow
wait_timeout: 60


