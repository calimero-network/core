description: A workflow demonstrating cross-context calls (XCall) between contexts across nodes
name: XCall Example Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:dce6263
  prefix: calimero-node

steps:
  # ============================================
  # Setup Phase: Install app and create contexts on Node 1
  # ============================================
  
  # Step 1: Install the xcall-example application on Node 1
  - name: Install XCall Application on Node 1
    type: install_application
    node: calimero-node-1
    path: res/xcall_example.wasm
    dev: true
    outputs:
      app_id: applicationId

  # Step 2: Create Context A on Node 1
  - name: Create Context A on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_a_id: contextId
      context_a_member_key: memberPublicKey

  - name: Assert Context A created
    type: assert
    statements:
      - "is_set({{context_a_id}})"
      - "is_set({{context_a_member_key}})"

  # Step 3: Create Context B on Node 1 (same node, different context)
  - name: Create Context B on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_b_id: contextId
      context_b_member_key: memberPublicKey

  - name: Assert Context B created
    type: assert
    statements:
      - "is_set({{context_b_id}})"
      - "is_set({{context_b_member_key}})"

  # ============================================
  # Setup Phase: Node 2 creates identities and joins both contexts
  # ============================================

  # Step 4: Install app on Node 2
  - name: Install XCall Application on Node 2
    type: install_application
    node: calimero-node-2
    path: res/xcall_example.wasm
    dev: true
    outputs:
      app_id_node2: applicationId

  # Step 5: Node 2 creates first identity (for Context A)
  - name: Create Identity for Context A on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      identity_a: publicKey

  - name: Wait for first identity creation
    type: wait
    seconds: 5

  # Step 6: Node 2 creates second identity (for Context B)
  - name: Create Identity for Context B on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      identity_b: publicKey

  - name: Wait for second identity creation
    type: wait
    seconds: 5

  # Step 7: Node 1 invites first identity to Context A
  - name: Invite Identity A to Context A
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    grantee_id: "{{identity_a}}"
    granter_id: "{{context_a_member_key}}"
    capability: member
    outputs:
      invitation_a: invitation

  # Step 8: Node 1 invites second identity to Context B
  - name: Invite Identity B to Context B
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    grantee_id: "{{identity_b}}"
    granter_id: "{{context_b_member_key}}"
    capability: member
    outputs:
      invitation_b: invitation

  # Step 9: Node 2 joins Context A with first identity
  - name: Node 2 Join Context A
    type: join_context
    node: calimero-node-2
    context_id: "{{context_a_id}}"
    invitee_id: "{{identity_a}}"
    invitation: "{{invitation_a}}"

  - name: Wait for Context A join to propagate
    type: wait
    seconds: 5

  # Step 10: Node 2 joins Context B with second identity
  - name: Node 2 Join Context B
    type: join_context
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    invitee_id: "{{identity_b}}"
    invitation: "{{invitation_b}}"

  - name: Wait for Context B join to propagate
    type: wait
    seconds: 5

  # ============================================
  # Testing Phase: XCall functionality
  # ============================================

  # Step 10: Verify both contexts start with zero messages
  - name: Check initial message count on Context A (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: message_count
    outputs:
      context_a_initial_count: result

  - name: Assert Context A starts with zero messages
    type: json_assert
    statements:
      - 'json_equal({{context_a_initial_count}}, {"output": 0})'

  - name: Check initial message count on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: message_count
    outputs:
      context_b_initial_count_node1: result

  - name: Assert Context B starts with zero messages on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_initial_count_node1}}, {"output": 0})'

  - name: Check initial message count on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: message_count
    outputs:
      context_b_initial_count_node2: result

  - name: Assert Context B starts with zero messages on Node 2
    type: json_assert
    statements:
      - 'json_equal({{context_b_initial_count_node2}}, {"output": 0})'

  # Step 11: Node 1 calls Context A, which xcalls Context B (locally on Node 1)
  - name: Send greeting from Context A to Context B (on Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: send_greeting
    args:
      target_context: "{{context_b_id}}"
      message: "Hello from Context A!"
    outputs:
      send_result_1: result

  - name: Assert send_greeting succeeded
    type: json_assert
    statements:
      - 'json_equal({{send_result_1}}, {"output": null})'

  # Step 12: Wait for XCall execution and state delta broadcast
  - name: Wait for XCall execution and broadcast
    type: wait
    seconds: 5

  # Step 13: Verify Context B received the message on Node 1 (where xcall executed)
  - name: Check message count on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: message_count
    outputs:
      context_b_count_node1: result

  - name: Assert Context B has 1 message on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_count_node1}}, {"output": 1})'

  # Step 14: Verify Context B's state change synced to Node 2
  - name: Check message count on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: message_count
    outputs:
      context_b_count_node2: result

  - name: Assert Context B has 1 message on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_b_count_node2}}, {"output": 1})'

  # Step 15: Get messages on Context B from Node 2 and verify content
  - name: Get messages on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: get_messages
    outputs:
      context_b_messages_node2: result

  - name: Assert Context B received correct message on Node 2
    type: json_assert
    statements:
      - 'json_path_count({{context_b_messages_node2}}, "$.output", 1)'
      - 'json_subset({{context_b_messages_node2}}, {"output": [{"from_context": "{{context_a_id}}", "content": "Hello from Context A!"}]})'

  # Step 16: Verify Context A still has no messages (sender doesn't receive)
  - name: Check message count on Context A (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: message_count
    outputs:
      context_a_count_after_send: result

  - name: Assert Context A still has zero messages
    type: json_assert
    statements:
      - 'json_equal({{context_a_count_after_send}}, {"output": 0})'

  # ============================================
  # Bi-directional Communication Test
  # ============================================

  # Step 17: Send a greeting from Context B to Context A
  - name: Send greeting from Context B to Context A (on Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: send_greeting
    args:
      target_context: "{{context_a_id}}"
      message: "Hi back from Context B!"
    outputs:
      send_result_2: result

  - name: Assert send_greeting from B to A succeeded
    type: json_assert
    statements:
      - 'json_equal({{send_result_2}}, {"output": null})'

  # Step 18: Wait for XCall execution and broadcast
  - name: Wait for XCall execution and broadcast
    type: wait
    seconds: 5

  # Step 19: Verify Context A received the message on Node 1
  - name: Check message count on Context A (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: message_count
    outputs:
      context_a_count_node1: result

  - name: Assert Context A has 1 message on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_a_count_node1}}, {"output": 1})'

  # Step 20: Verify Context A's state change synced to Node 2
  - name: Check message count on Context A (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_a_id}}"
    executor_public_key: "{{identity_a}}"
    method: message_count
    outputs:
      context_a_count_node2: result

  - name: Assert Context A has 1 message on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_a_count_node2}}, {"output": 1})'

  # Step 21: Verify message content on Node 2
  - name: Get messages on Context A (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_a_id}}"
    executor_public_key: "{{identity_a}}"
    method: get_messages
    outputs:
      context_a_messages_node2: result

  - name: Assert Context A received correct message on Node 2
    type: json_assert
    statements:
      - 'json_path_count({{context_a_messages_node2}}, "$.output", 1)'
      - 'json_subset({{context_a_messages_node2}}, {"output": [{"from_context": "{{context_b_id}}", "content": "Hi back from Context B!"}]})'

  # ============================================
  # Multiple Messages Test
  # ============================================

  # Step 22: Send multiple messages from Context A to Context B
  - name: Send second message from Context A to Context B
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: send_greeting
    args:
      target_context: "{{context_b_id}}"
      message: "How are you?"
    outputs:
      send_result_3: result

  - name: Wait for XCall execution
    type: wait
    seconds: 5

  - name: Send third message from Context A to Context B
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: send_greeting
    args:
      target_context: "{{context_b_id}}"
      message: "XCall is working great!"
    outputs:
      send_result_4: result

  - name: Wait for XCall execution
    type: wait
    seconds: 5

  # Step 23: Verify Context B now has 3 messages total on both nodes
  - name: Check final message count on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: message_count
    outputs:
      context_b_final_count_node1: result

  - name: Assert Context B has 3 messages on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_final_count_node1}}, {"output": 3})'

  - name: Check final message count on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: message_count
    outputs:
      context_b_final_count_node2: result

  - name: Assert Context B has 3 messages on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_b_final_count_node2}}, {"output": 3})'

  # Step 24: Clear messages on Context B from Node 1
  - name: Clear messages on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: clear_messages
    outputs:
      clear_result: result

  - name: Wait for clear operation to sync
    type: wait
    seconds: 5

  # Step 25: Verify messages cleared on both nodes
  - name: Check message count after clearing (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: message_count
    outputs:
      context_b_count_after_clear_node1: result

  - name: Assert Context B has zero messages on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_count_after_clear_node1}}, {"output": 0})'

  - name: Check message count after clearing (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: message_count
    outputs:
      context_b_count_after_clear_node2: result

  - name: Assert Context B has zero messages on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_b_count_after_clear_node2}}, {"output": 0})'

# Configuration
stop_all_nodes: false
restart: false
wait_timeout: 120
