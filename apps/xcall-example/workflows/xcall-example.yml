description: A workflow demonstrating cross-context calls (XCall) using ping-pong between contexts
name: XCall Ping-Pong Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:9928627
  prefix: calimero-node

steps:
  # ============================================
  # Setup Phase: Install app and create contexts on Node 1
  # ============================================
  
  # Step 1: Install the xcall-example application on Node 1
  - name: Install XCall Application on Node 1
    type: install_application
    node: calimero-node-1
    path: res/xcall_example.wasm
    dev: true
    outputs:
      app_id: applicationId

  # Step 2: Create Context A on Node 1
  - name: Create Context A on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_a_id: contextId
      context_a_member_key: memberPublicKey

  - name: Assert Context A created
    type: assert
    statements:
      - "is_set({{context_a_id}})"
      - "is_set({{context_a_member_key}})"

  # Step 3: Create Context B on Node 1 (same node, different context)
  - name: Create Context B on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_b_id: contextId
      context_b_member_key: memberPublicKey

  - name: Assert Context B created
    type: assert
    statements:
      - "is_set({{context_b_id}})"
      - "is_set({{context_b_member_key}})"

  # ============================================
  # Setup Phase: Node 2 creates identities and joins both contexts
  # ============================================

  # Step 4: Install app on Node 2
  - name: Install XCall Application on Node 2
    type: install_application
    node: calimero-node-2
    path: res/xcall_example.wasm
    dev: true
    outputs:
      app_id_node2: applicationId

  # Step 5: Node 2 creates first identity (for Context A)
  - name: Create Identity for Context A on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      identity_a: publicKey

  - name: Wait for first identity creation
    type: wait
    seconds: 5

  # Step 6: Node 2 creates second identity (for Context B)
  - name: Create Identity for Context B on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      identity_b: publicKey

  - name: Wait for second identity creation
    type: wait
    seconds: 5

  # Step 7: Node 1 invites first identity to Context A
  - name: Invite Identity A to Context A
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    grantee_id: "{{identity_a}}"
    granter_id: "{{context_a_member_key}}"
    capability: member
    outputs:
      invitation_a: invitation

  # Step 8: Node 1 invites second identity to Context B
  - name: Invite Identity B to Context B
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    grantee_id: "{{identity_b}}"
    granter_id: "{{context_b_member_key}}"
    capability: member
    outputs:
      invitation_b: invitation

  # Step 9: Node 2 joins Context A with first identity
  - name: Node 2 Join Context A
    type: join_context
    node: calimero-node-2
    context_id: "{{context_a_id}}"
    invitee_id: "{{identity_a}}"
    invitation: "{{invitation_a}}"

  - name: Wait for Context A join to propagate
    type: wait
    seconds: 5

  # Step 10: Node 2 joins Context B with second identity
  - name: Node 2 Join Context B
    type: join_context
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    invitee_id: "{{identity_b}}"
    invitation: "{{invitation_b}}"

  - name: Wait for Context B join to propagate
    type: wait
    seconds: 5

  # ============================================
  # Testing Phase: Ping-Pong XCall functionality
  # ============================================

  # Step 11: Verify both contexts start with counter at 0
  - name: Check initial counter on Context A (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: get_counter
    outputs:
      context_a_initial_counter: result

  - name: Assert Context A starts with counter at 0
    type: json_assert
    statements:
      - 'json_equal({{context_a_initial_counter}}, {"output": 0})'

  - name: Check initial counter on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: get_counter
    outputs:
      context_b_initial_counter_node1: result

  - name: Assert Context B starts with counter at 0 on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_initial_counter_node1}}, {"output": 0})'

  - name: Check initial counter on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: get_counter
    outputs:
      context_b_initial_counter_node2: result

  - name: Assert Context B starts with counter at 0 on Node 2
    type: json_assert
    statements:
      - 'json_equal({{context_b_initial_counter_node2}}, {"output": 0})'

  # Step 12: Context A sends ping to Context B
  - name: Send ping from Context A to Context B (on Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: ping
    args:
      target_context: "{{context_b_id}}"
    outputs:
      ping_result_1: result

  - name: Assert ping succeeded
    type: json_assert
    statements:
      - 'json_equal({{ping_result_1}}, {"output": null})'

  # Step 13: Wait for XCall execution and state delta broadcast
  - name: Wait for XCall execution and broadcast
    type: wait
    seconds: 5

  # Step 14: Verify Context B counter incremented on Node 1
  - name: Check counter on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: get_counter
    outputs:
      context_b_counter_node1: result

  - name: Assert Context B counter is 1 on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_counter_node1}}, {"output": 1})'

  # Step 15: Verify Context B's state change synced to Node 2
  - name: Check counter on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: get_counter
    outputs:
      context_b_counter_node2: result

  - name: Assert Context B counter is 1 on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_b_counter_node2}}, {"output": 1})'

  # Step 16: Verify Context A counter is still 0 (sender doesn't increment)
  - name: Check counter on Context A (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: get_counter
    outputs:
      context_a_counter_after_ping: result

  - name: Assert Context A counter is still 0
    type: json_assert
    statements:
      - 'json_equal({{context_a_counter_after_ping}}, {"output": 0})'

  # ============================================
  # Bi-directional Ping-Pong Test
  # ============================================

  # Step 17: Send a ping from Context B to Context A
  - name: Send ping from Context B to Context A (on Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: ping
    args:
      target_context: "{{context_a_id}}"
    outputs:
      ping_result_2: result

  - name: Assert ping from B to A succeeded
    type: json_assert
    statements:
      - 'json_equal({{ping_result_2}}, {"output": null})'

  # Step 18: Wait for XCall execution and broadcast
  - name: Wait for XCall execution and broadcast
    type: wait
    seconds: 5

  # Step 19: Verify Context A counter incremented on Node 1
  - name: Check counter on Context A (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: get_counter
    outputs:
      context_a_counter_node1: result

  - name: Assert Context A counter is 1 on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_a_counter_node1}}, {"output": 1})'

  # Step 20: Verify Context A's state change synced to Node 2
  - name: Check counter on Context A (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_a_id}}"
    executor_public_key: "{{identity_a}}"
    method: get_counter
    outputs:
      context_a_counter_node2: result

  - name: Assert Context A counter is 1 on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_a_counter_node2}}, {"output": 1})'

  # ============================================
  # Multiple Pings Test
  # ============================================

  # Step 21: Send multiple pings from Context A to Context B
  - name: Send second ping from Context A to Context B
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: ping
    args:
      target_context: "{{context_b_id}}"
    outputs:
      ping_result_3: result

  - name: Wait for XCall execution
    type: wait
    seconds: 5

  - name: Send third ping from Context A to Context B
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: ping
    args:
      target_context: "{{context_b_id}}"
    outputs:
      ping_result_4: result

  - name: Wait for XCall execution
    type: wait
    seconds: 5

  # Step 22: Verify Context B counter is now 3 on both nodes
  - name: Check final counter on Context B (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_b_id}}"
    executor_public_key: "{{context_b_member_key}}"
    method: get_counter
    outputs:
      context_b_final_counter_node1: result

  - name: Assert Context B counter is 3 on Node 1
    type: json_assert
    statements:
      - 'json_equal({{context_b_final_counter_node1}}, {"output": 3})'

  - name: Check final counter on Context B (Node 2)
    type: call
    node: calimero-node-2
    context_id: "{{context_b_id}}"
    executor_public_key: "{{identity_b}}"
    method: get_counter
    outputs:
      context_b_final_counter_node2: result

  - name: Assert Context B counter is 3 on Node 2 (synced)
    type: json_assert
    statements:
      - 'json_equal({{context_b_final_counter_node2}}, {"output": 3})'

  # Step 23: Verify Context A counter is still 1 (contexts are independent)
  - name: Verify Context A counter is still 1 (Node 1)
    type: call
    node: calimero-node-1
    context_id: "{{context_a_id}}"
    executor_public_key: "{{context_a_member_key}}"
    method: get_counter
    outputs:
      context_a_final_counter: result

  - name: Assert Context A counter is still 1
    type: json_assert
    statements:
      - 'json_equal({{context_a_final_counter}}, {"output": 1})'

# Configuration
stop_all_nodes: false
restart: false
wait_timeout: 120
