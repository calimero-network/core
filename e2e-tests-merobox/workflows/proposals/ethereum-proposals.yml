name: "Proposals API - Ethereum Comprehensive Test"
description: "Comprehensive test for Proposals API on Ethereum, including creation, listing, getting, messages, and approval"

# Use --no-docker mode with native merod processes
no_docker: true
force_pull_image: false

nodes:
  chain_id: calimero-testnet
  count: 3
  image: ghcr.io/calimero-network/merod:edge
  prefix: eth-prop

steps:
  # ============================================================================
  # Phase 1: Setup - Install blockchain integration app
  # ============================================================================
  - name: Install Blockchain Integration App on Node 1
    type: install_application
    node: eth-prop-1
    url: "https://github.com/calimero-network/demo-blockchain-integrations/raw/refs/heads/master/logic/res/blockchain.wasm"
    dev: true
    outputs:
      app_id: applicationId
      app_id_node1:
        field: applicationId
        target: app_id_{node_name}

  # ============================================================================
  # Phase 2: Context Creation with Custom Outputs
  # ============================================================================
  - name: Create Context on Node 1
    type: create_context
    node: eth-prop-1
    application_id: "{{app_id}}"
    protocol: ethereum
    outputs:
      context_id: contextId
      inviter_key: memberPublicKey
      ctx_id_node1:
        field: contextId
        target: context_id_{node_name}

  # ============================================================================
  # Phase 3: Generate Identities for Other Nodes
  # ============================================================================
  - name: Create Identity on Node 2
    type: create_identity
    node: eth-prop-2
    outputs:
      invitee2_key: publicKey
      key_node2:
        field: publicKey
        target: public_key_{node_name}

  - name: Create Identity on Node 3
    type: create_identity
    node: eth-prop-3
    outputs:
      invitee3_key: publicKey
      key_node3:
        field: publicKey
        target: public_key_{node_name}

  - name: Wait for Identity Creation
    type: wait
    seconds: 3

  # ============================================================================
  # Phase 4: Invite and Join
  # ============================================================================
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: eth-prop-1
    context_id: "{{context_id}}"
    grantee_id: "{{invitee2_key}}"
    granter_id: "{{inviter_key}}"
    capability: member
    outputs:
      invitation2: invitation

  - name: Join Context from Node 2
    type: join_context
    node: eth-prop-2
    context_id: "{{context_id}}"
    invitee_id: "{{invitee2_key}}"
    invitation: "{{invitation2}}"

  - name: Invite Node 3 from Node 1
    type: invite_identity
    node: eth-prop-1
    context_id: "{{context_id}}"
    grantee_id: "{{invitee3_key}}"
    granter_id: "{{inviter_key}}"
    capability: member
    outputs:
      invitation3: invitation

  - name: Join Context from Node 3
    type: join_context
    node: eth-prop-3
    context_id: "{{context_id}}"
    invitee_id: "{{invitee3_key}}"
    invitation: "{{invitation3}}"

  - name: Wait for Consensus After Join
    type: wait
    seconds: 5

  # ============================================================================
  # Phase 5: Create Multiple Proposals
  # ============================================================================
  - name: Create Proposal 1 - SetContextValue
    type: call
    node: eth-prop-1
    context_id: "{{context_id}}"
    executor_public_key: "{{inviter_key}}"
    method: create_new_proposal
    args:
      request:
        action_type: "SetContextValue"
        params:
          key: "test_key_1"
          value: "test_value_1"
    outputs:
      prop1_id:
        field: result
        path: output

  - name: Wait After Proposal 1
    type: wait
    seconds: 2

  - name: Create Proposal 2 - SetContextValue
    type: call
    node: eth-prop-1
    context_id: "{{context_id}}"
    executor_public_key: "{{inviter_key}}"
    method: create_new_proposal
    args:
      request:
        action_type: "SetContextValue"
        params:
          key: "test_key_2"
          value: "test_value_2"
    outputs:
      prop2_id:
        field: result
        path: output

  - name: Wait After Proposal 2
    type: wait
    seconds: 2

  - name: Create Proposal 3 - SetNumApprovals
    type: call
    node: eth-prop-1
    context_id: "{{context_id}}"
    executor_public_key: "{{inviter_key}}"
    method: create_new_proposal
    args:
      request:
        action_type: "SetNumApprovals"
        params:
          num_approvals: 2
    outputs:
      prop3_id:
        field: result
        path: output

  - name: Wait After Proposal 3
    type: wait
    seconds: 2

  # Approve Proposal 3 so num_approvals takes effect before creating Proposal 4
  - name: Approve Proposal 3 from Node 2 (to activate num_approvals setting)
    type: call
    node: eth-prop-2
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee2_key}}"
    method: approve_proposal
    args:
      proposal_id: "{{prop3_id}}"
    outputs:
      approve3_result: result

  - name: Wait for Proposal 3 Execution
    type: wait
    seconds: 5

  - name: Create Proposal 4 - SetContextValue (for messages test)
    type: call
    node: eth-prop-1
    context_id: "{{context_id}}"
    executor_public_key: "{{inviter_key}}"
    method: create_new_proposal
    args:
      request:
        action_type: "SetContextValue"
        params:
          key: "test_key_4"
          value: "test_value_4"
    outputs:
      prop4_id:
        field: result
        path: output

  - name: Wait for All Proposals to Propagate
    type: wait
    seconds: 5

  # ============================================================================
  # Phase 6: Test Proposals API Methods - list_proposals
  # ============================================================================
  - name: List All Proposals from Node 1
    type: list_proposals
    node: eth-prop-1
    context_id: "{{context_id}}"

  - name: List All Proposals from Node 2
    type: list_proposals
    node: eth-prop-2
    context_id: "{{context_id}}"

  - name: List All Proposals from Node 3
    type: list_proposals
    node: eth-prop-3
    context_id: "{{context_id}}"

  # ============================================================================
  # Phase 7: Test Proposals API Methods - get_proposal
  # ============================================================================
  - name: Get Proposal 1 Details from Node 1
    type: get_proposal
    node: eth-prop-1
    context_id: "{{context_id}}"
    proposal_id: "{{prop1_id}}"

  - name: Get Proposal 2 Details from Node 2
    type: get_proposal
    node: eth-prop-2
    context_id: "{{context_id}}"
    proposal_id: "{{prop2_id}}"

  - name: Get Proposal 3 Details from Node 3 (already executed)
    type: get_proposal
    node: eth-prop-3
    context_id: "{{context_id}}"
    proposal_id: "{{prop3_id}}"

  - name: Get Proposal 4 Details from Node 1
    type: get_proposal
    node: eth-prop-1
    context_id: "{{context_id}}"
    proposal_id: "{{prop4_id}}"

  # ============================================================================
  # Phase 8: Test Proposals API Methods - get_proposal_approvers
  # ============================================================================
  - name: Get Proposal 1 Approvers from Node 1
    type: get_proposal_approvers
    node: eth-prop-1
    context_id: "{{context_id}}"
    proposal_id: "{{prop1_id}}"

  - name: Get Proposal 2 Approvers from Node 2
    type: get_proposal_approvers
    node: eth-prop-2
    context_id: "{{context_id}}"
    proposal_id: "{{prop2_id}}"

  # ============================================================================
  # Phase 9: Test Proposal Messages 
  # ============================================================================
  - name: Send Message to Proposal 1
    type: call
    node: eth-prop-1
    context_id: "{{context_id}}"
    executor_public_key: "{{inviter_key}}"
    method: send_proposal_messages
    args:
      proposal_id: "{{prop1_id}}"
      message:
        id: "msg1"
        author: "inviter"
        text: "This is a test message for proposal 1"
        created_at: "2023-11-24T12:34:56Z"
        proposal_id: "{{prop1_id}}"
    outputs:
      send_msg_result: result

  - name: Wait for Message Broadcast
    type: wait
    seconds: 5

  - name: Get Proposal Messages from Node 2
    type: call
    node: eth-prop-2
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee2_key}}"
    method: get_proposal_messages
    args:
      proposal_id: "{{prop1_id}}"
    outputs:
      messages_result: result

  - name: Get Proposal Messages from Node 3
    type: call
    node: eth-prop-3
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee3_key}}"
    method: get_proposal_messages
    args:
      proposal_id: "{{prop1_id}}"
    outputs:
      messages_result_node3: result

  # ============================================================================
  # Phase 10: Approve Remaining Proposals from Different Nodes
  # ============================================================================
  - name: Approve Proposal 1 from Node 2
    type: call
    node: eth-prop-2
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee2_key}}"
    method: approve_proposal
    args:
      proposal_id: "{{prop1_id}}"
    outputs:
      approve1_result: result

  - name: Approve Proposal 2 from Node 3
    type: call
    node: eth-prop-3
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee3_key}}"
    method: approve_proposal
    args:
      proposal_id: "{{prop2_id}}"
    outputs:
      approve2_result: result

  - name: Approve Proposal 4 from Node 2 (First Approval)
    type: call
    node: eth-prop-2
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee2_key}}"
    method: approve_proposal
    args:
      proposal_id: "{{prop4_id}}"
    outputs:
      approve4_result: result

  - name: Wait for First Approval to Propagate
    type: wait
    seconds: 3

  # ============================================================================
  # Phase 11: Verify Approvers After First Approval (Before Execution)
  # ============================================================================
  - name: Verify Proposal 1 Approvers After Approval
    type: get_proposal_approvers
    node: eth-prop-1
    context_id: "{{context_id}}"
    proposal_id: "{{prop1_id}}"

  - name: Verify Proposal 4 Approvers After First Approval
    type: get_proposal_approvers
    node: eth-prop-1
    context_id: "{{context_id}}"
    proposal_id: "{{prop4_id}}"

  # Now apply second approval which will execute Proposal 4
  - name: Approve Proposal 4 from Node 3 (Second Approval - Triggers Execution)
    type: call
    node: eth-prop-3
    context_id: "{{context_id}}"
    executor_public_key: "{{invitee3_key}}"
    method: approve_proposal
    args:
      proposal_id: "{{prop4_id}}"
    outputs:
      approve4_result_node3: result

  - name: Wait for Proposal 4 Execution
    type: wait
    seconds: 5

  # ============================================================================
  # Phase 12: Test with Repeat - Create and Query Multiple Proposals
  # ============================================================================
  - name: Create Multiple Proposals with Repeat
    type: repeat
    count: 3
    outputs:
      current_iteration: iteration
      total_count: total_iterations
    steps:
      - name: Create SetContextValue Proposal
        type: call
        node: eth-prop-1
        context_id: "{{context_id}}"
        executor_public_key: "{{inviter_key}}"
        method: create_new_proposal
        args:
          request:
            action_type: "SetContextValue"
            params:
              key: "repeat_key_{{current_iteration}}"
              value: "repeat_value_{{current_iteration}}"
        outputs:
          repeat_prop_id:
            field: result
            path: output

      - name: Wait After Creation
        type: wait
        seconds: 2

      - name: Get Proposal Details
        type: get_proposal
        node: eth-prop-2
        context_id: "{{context_id}}"
        proposal_id: "{{repeat_prop_id}}"

      - name: Check Proposal Approvers
        type: get_proposal_approvers
        node: eth-prop-3
        context_id: "{{context_id}}"
        proposal_id: "{{repeat_prop_id}}"

  # ============================================================================
  # Phase 13: Final List All Proposals
  # ============================================================================
  - name: Final List All Proposals from Node 1
    type: list_proposals
    node: eth-prop-1
    context_id: "{{context_id}}"

  - name: Final List All Proposals from Node 2
    type: list_proposals
    node: eth-prop-2
    context_id: "{{context_id}}"

  - name: Final List All Proposals from Node 3
    type: list_proposals
    node: eth-prop-3
    context_id: "{{context_id}}"

# Configuration options
stop_all_nodes: true
restart: false
wait_timeout: 60
nuke_on_end: true
