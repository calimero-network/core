{
  "steps": [
    {
      "applicationInstall": {
        "application": {
          "url": "https://github.com/calimero-network/demo-blockchain-integrations/releases/download/latest/blockchain.wasm.gz"
        },
        "target": "allMembers"
      }
    },
    {
      "contextCreate": null
    },
    {
      "wait": {
        "for": "broadcast",
        "durationMs": 5000,
        "description": [
          "Wait for context initialization to complete"
        ]
      }
    },
    {
      "contextInviteJoin": null
    },
    {
      "wait": {
        "for": "consensus",
        "durationMs": 5000,
        "description": [
          "Wait for gossipsub mesh formation + initial sync completion.",
          "Increased to 5s base (10s total with 3 nodes) for CI reliability."
        ]
      }
    },
    {
      "call": {
        "methodName": "create_new_proposal",
        "argsJson": {
          "request": {
            "action_type": "ExternalFunctionCall",
            "params": {
              "receiver_id": "mock-external.test.near",
              "method_name": "increment",
              "args": "{}",
              "deposit": "0"
            }
          }
        },
        "expectedResultJson": null,
        "target": "inviter",
        "retries": 5,
        "intervalMs": 1000,
        "description": [
          "if we don't reach consensus in the ideal case",
          "wait 5 seconds for nodes that have not yet synced",
          "in the worst case, wait 20 * 5s for nodes that uselessly",
          "keep syncing with themselves without having the state"
        ]
      }
    },
    {
      "getProposals": {
        "description": [
          "get current proposals and extract the ID of the first one"
        ]
      }
    },
    {
      "call": {
        "methodName": "send_proposal_messages",
        "argsJson": {
          "proposal_id": "${proposal_id}",
          "message": {
            "id": "msg1",
            "author": "inviter",
            "text": "This is a test message for the proposal",
            "created_at": "2023-11-24T12:34:56Z",
            "proposal_id": "${proposal_id}"
          }
        },
        "expectedResultJson": null,
        "target": "inviter"
      }
    },
    {
      "wait": {
        "for": "broadcast",
        "durationMs": 5000,
        "description": [
          "wait exactly 5s for the broadcast to propagate"
        ]
      }
    },
    {
      "call": {
        "methodName": "get_proposal_messages",
        "argsJson": {
          "proposal_id": "${proposal_id}"
        },
        "expectedResultJson": [
          {
            "id": "msg1",
            "author": "inviter",
            "text": "This is a test message for the proposal",
            "created_at": "2023-11-24T12:34:56Z"
          }
        ],
        "target": "invitees",
        "retries": 10,
        "intervalMs": 2000,
        "description": [
          "Retry up to 10 times with 2s intervals for CI reliability.",
          "Gossipsub mesh + sync may take longer in CI environments."
        ]
      }
    },
    {
      "call": {
        "methodName": "approve_proposal",
        "argsJson": {
          "proposal_id": "${proposal_id}"
        },
        "expectedResultJson": null,
        "target": "invitees"
      }
    },
    {
      "verifyExternalState": {
        "contractId": "mock-external.test.near",
        "methodName": "get_count",
        "args": [],
        "expectedValue": "1"
      }
    }
  ]
}
