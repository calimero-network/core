{
  "steps": [
    {
      "applicationInstall": {
        "application": {
          "localFile": "./apps/team-metrics-macro/res/team_metrics_macro.wasm"
        },
        "target": "allMembers"
      }
    },
    {
      "contextCreate": null
    },
    {
      "contextCreateAlias": {
        "aliasName": "team_metrics"
      }
    },
    {
      "wait": {
        "for": "broadcast",
        "durationMs": 5000,
        "description": [
          "Wait for context initialization"
        ]
      }
    },
    {
      "call": {
        "methodName": "record_win",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": 1,
        "target": "inviter",
        "description": [
          "Node 1: Record first win for team-a"
        ]
      }
    },
    {
      "call": {
        "methodName": "record_win",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": 2,
        "target": "inviter",
        "description": [
          "Node 1: Record second win for team-a"
        ]
      }
    },
    {
      "wait": {
        "for": "broadcast",
        "durationMs": 3000
      }
    },
    {
      "contextInviteJoin": null
    },
    {
      "wait": {
        "for": "consensus",
        "durationMs": 5000,
        "description": [
          "Wait for nodes to join and sync"
        ]
      }
    },
    {
      "call": {
        "methodName": "get_wins",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": 2,
        "target": "allMembers",
        "retries": 10,
        "intervalMs": 1000,
        "description": [
          "Verify all nodes synced: team-a has 2 wins"
        ]
      }
    },
    {
      "call": {
        "methodName": "record_win",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": null,
        "target": "inviter",
        "description": [
          "Node 1: Record win (concurrent test)"
        ]
      }
    },
    {
      "call": {
        "methodName": "record_loss",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": null,
        "target": "invitees",
        "description": [
          "Nodes 2 & 3: Record losses concurrently with Node 1's win"
        ]
      }
    },
    {
      "wait": {
        "for": "consensus",
        "durationMs": 5000,
        "description": [
          "CRITICAL: Concurrent updates to different counters in TeamStats",
          "This tests that #[derive(Mergeable)] correctly merges:",
          "- Node 1 incremented wins",
          "- Nodes 2 & 3 incremented losses",
          "Result: BOTH counters should reflect all increments!"
        ]
      }
    },
    {
      "call": {
        "methodName": "get_wins",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": 3,
        "target": "allMembers",
        "retries": 15,
        "intervalMs": 2000,
        "description": [
          "Verify wins counter: 2 + 1 = 3 (win preserved during concurrent updates)"
        ]
      }
    },
    {
      "call": {
        "methodName": "get_losses",
        "argsJson": {
          "team_id": "team-a"
        },
        "expectedResultJson": 2,
        "target": "allMembers",
        "retries": 15,
        "intervalMs": 2000,
        "description": [
          "Verify losses counter: 0 + 1 + 1 = 2 (both concurrent losses preserved)",
          "SUCCESS: Concurrent updates to different fields in TeamStats merged correctly!",
          "This proves #[derive(Mergeable)] works for nested structs!"
        ]
      }
    }
  ]
}

